//Auxiliary functions to simplify calculation and data acquisition
// get font-family from fonts map by name
@function get-font ($font) {
  @return map-get($fonts, $font);
}

// get font-size from font sizes map by name
@function get-font-size ($size) {
  @return map-get($fontSizes, $size);
}

// converts pixels to rem
@function to-rem ($n, $base: 16) {
  @return $n / $base * 1rem;
}

// get color from colors map by name
@function get-color ($color) {
  @return map-get($colors, $color);
}

// converts an array to a string with the given "glue"
// example (1, 2, 3, 4, 5) with glue "&" will return "1&2&3&4&5" string
@function to-string($list, $glue: "") {
  // empty string by default
  $result: ""; // iterate through all array items
  @for $i from 1 through length($list) {
    // save the current item in the variable
    $e: nth($list, $i); // if it's not the last item in the array then join it with the glue, otherwise just add it to the result string
    $result: if($i !=length($list), $result + unquote("#{$e}#{$glue}"), $result + unquote("#{$e}"));
  }
  @return unquote($result);
}

// cuts the given value to N digits after comma.
@function to-fixed($float, $digits: 4) {
  // in old sass a precision couldn't be higher than 5. Now I guess it can be removed
  $sass-precision: 5; // if the passed value more then 5 let's set it 5
  @if $digits>$sass-precision {
    $digits: $sass-precision;
  } // get the pow
  $pow: pow(10, $digits); // get an integer and then a correct float
  @return floor($float * $pow) / $pow;
}

// calculates x in n power
@function pow($x, $n) {
  // initial value
  $ret: 1; // positive power is multiplication
  @if $n>=0 {
    @for $i from 1 through $n {
      $ret: $ret * $x;
    }
  }
  @else {
    // negative power is division
    @for $i from $n to 0 {
      $ret: $ret / $x;
    }
  }
  @return $ret;
}